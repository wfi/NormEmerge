#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.1.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 69 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 8 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 8 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 0 1 #"\0"
0 75 11 #" Monospace\0"
0.0 8 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 2 38 #"drscheme:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
28 #"drscheme:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 31
#"drscheme:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 8 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 8 24 #"drscheme:text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 0 1 #"\0"
0 75 11 #" Monospace\0"
0.0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 9 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 9 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 5414 0 26 3 12 #"#lang racket"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 19 3 12 #"\"neutils.rkt"
0 0 19 3 1 #"\""
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"X"
0 0 24 3 1 #" "
0 0 20 3 4 #"0.01"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"Y"
0 0 24 3 1 #" "
0 0 20 3 4 #"0.01"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"CLOSE-ENOUGH"
0 0 24 3 1 #" "
0 0 20 3 4 #"0.02"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"CONST-INC"
0 0 24 3 1 #" "
0 0 14 3 1 #"X"
0 0 22 3 1 #")"
0 0 24 3 2 #"  "
0 0 17 3 42 #";; used in simulation but X used in theory"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"P"
0 0 24 3 1 #" "
0 0 20 3 4 #"0.05"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 17 3 29 #";; Proportional update factor"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; -------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; Data Definitions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; an agent is a number"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; a population is a (listof number)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;--------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Utilities"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; cross-prod: (listof X) (listof Y) -> (listof (list X Y))"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; generate the cross product of the two lists"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"cross-prod"
0 0 24 3 1 #" "
0 0 14 3 2 #"l1"
0 0 24 3 1 #" "
0 0 14 3 2 #"l2"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 2 #"l2"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"l2"
0 0 22 3 3 #")))"
0 0 24 3 1 #" "
0 0 14 3 2 #"l1"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 10 #"cross-prod"
0 0 24 3 1 #" "
0 0 14 3 2 #"l1"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"l2"
0 0 22 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; group-by: (listof (list X Y ...)) N -> (listof (listof (list X Y "
 #"...)))"
) 0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #";; group a list of tuples into lists of tuples which share the same "
 #"value as indexed by nth"
) 0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"group-by"
0 0 24 3 1 #" "
0 0 14 3 3 #"lot"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 24 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"unique-vals"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"tuple"
0 0 24 3 1 #" "
0 0 14 3 5 #"sofar"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 5 #"tuple"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 5 #"sofar"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 5 #"sofar"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 5 #"tuple"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 5 #"sofar"
0 0 22 3 3 #")))"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 3 #"lot"
0 0 22 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"uval"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"tup"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"uval"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"tup"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 24 3 1 #" "
0 0 14 3 3 #"lot"
0 0 22 3 2 #"))"
0 0 24 3 1 #" "
0 0 14 3 11 #"unique-vals"
0 0 22 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; make-rand-pop: number number number -> population"
0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";; create a population having n agents centered around a mean with a"
 #" spread scale * [-0.05,0.05]"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; thus, acceptable ranges for spread are 0 (no variation at all) up"
 #" to 10"
) 0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"make-rand-pop"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 4 #"mean"
0 0 24 3 1 #" "
0 0 14 3 6 #"spread"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"_"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"max"
0 0 24 3 1 #" "
0 0 20 3 1 #"0"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 20 3 1 #"1"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"mean"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 6 #"spread"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 20 3 4 #"1000"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 20 3 7 #"10000.0"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 20 3 4 #"0.05"
0 0 22 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 110
(
 #";; create-pops-plus: number number (listof number) (listof number) -"
 #"> (listof (list number number population))"
) 0 0 24 29 1 #"\n"
0 0 17 3 103
(
 #";; create a list of augmented populations given as list of triples, "
 #"where the first is the target mean,"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";; the second is the spread used to generate the third is the popula"
 #"tion"
) 0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"create-pops-plus"
0 0 24 3 1 #" "
0 0 14 3 7 #"howmany"
0 0 24 3 1 #" "
0 0 14 3 7 #"popsize"
0 0 24 3 1 #" "
0 0 14 3 5 #"means"
0 0 24 3 1 #" "
0 0 14 3 5 #"sprds"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"mean"
0 0 24 3 1 #" "
0 0 14 3 6 #"spread"
0 0 24 3 1 #" "
0 0 14 3 5 #"sofar"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 7 #"howmany"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                               "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"_"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"mean"
0 0 24 3 1 #" "
0 0 14 3 6 #"spread"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"make-rand-pop"
0 0 24 3 1 #" "
0 0 14 3 7 #"popsize"
0 0 24 3 1 #" "
0 0 14 3 4 #"mean"
0 0 24 3 1 #" "
0 0 14 3 6 #"spread"
0 0 22 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 5 #"sofar"
0 0 22 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"cross-prod"
0 0 24 3 1 #" "
0 0 14 3 5 #"means"
0 0 24 3 1 #" "
0 0 14 3 5 #"sprds"
0 0 22 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"cross-prod"
0 0 24 3 1 #" "
0 0 14 3 5 #"means"
0 0 24 3 1 #" "
0 0 14 3 5 #"sprds"
0 0 22 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;--- simple utilities"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; average : (listof number) -> number"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 20 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; stdv : (listof number) -> number"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"stdv"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"sqrt"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"variance"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; variance: (listof number) -> number"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"variance"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 2 #"mu"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 20 3 1 #"0"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sqr"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"mu"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 3 #")))"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;--- compute average deltas based either pibar or on the estimate, "
 #"pbar"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; pibar : agent number number -> number"
0 0 24 29 1 #"\n"
0 0 17 3 108
(
 #";; given an agent, a, the average bias of a population including age"
 #"nt a, pbar, and the population size, n, "
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";; compute"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 7 #"average"
0 0 17 3 1 #" "
0 0 17 3 4 #"bias"
0 0 17 3 1 #" "
0 0 17 3 28 #"not counting the given agent"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pibar"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 4 #"pbar"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 4 #"pbar"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; delta-i : agent number -> number"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";; compute the increment/decrement to the bias of this agent based o"
 #"n the pibar"
) 0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"delta-i"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 5 #"pibar"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"X"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 5 #"pibar"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 20 3 2 #"-1"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 20 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #"X"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 20 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 20 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 5 #"pibar"
0 0 22 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 20 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #"Y"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 20 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 5 #"pibar"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 20 3 2 #"-1"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"Y"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 20 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 5 #"pibar"
0 0 22 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 7         439 4           0 0           0 72 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"delta-i-reduced"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 2 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 14 3 1 #"s"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"remove"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 4 #"))))"
0           0 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 7         199 4           0 0           0 32 0 17 3 46
#";; estimate-delta-i: (listof number) -> number"
0 0 2 29 1 #"\n"
0 0 17 3 118
(
 #";; for a given agent a from a given full population (including a), e"
 #"stimate the delta-i for any given agent using pbar"
) 0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"estimate-delta-i"
0 0 2 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 2 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 22 3 2 #"))"
0           0 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 48 #";; estimate-delta-bar: (listof number) -> number"
0 0 4 29 1 #"\n"
0 0 17 3 103
(
 #";; estimate the average delta over the given population by using onl"
 #"y the average bias (X*(2*pbar - 1))"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"estimate-delta-bar"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 40 #";; pbar-error: (listof number) -> number"
0 0 4 29 1 #"\n"
0 0 17 3 119
(
 #";; given a population, determine the error between the \"true\" aver"
 #"age-update based on removing each agent (i.e., pibar)"
) 0 0 4 29 1 #"\n"
0 0 17 3 74
(
 #";; as compared to an estimate that ignores this consideration (i.e.,"
 #" pbar)"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"pbar-error"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"pbar"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"abs"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"delta-i"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pibar"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 4 #"pbar"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 18 #"estimate-delta-bar"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 96
(
 #";; pbar-error-wrapper: (listof number) (listof number) number number"
 #" -> (listof (listof number))"
) 0 0 4 29 1 #"\n"
0 0 17 3 134
(
 #";; a testing wrapper for evaluating the pbar-error:  create howmany-"
 #"of-each populations of the given size with given means and spreads"
) 0 0 4 29 1 #"\n"
0 0 17 3 93
(
 #";; returns listof populations where the first two numbers in the pop"
 #"ulation are mean and stdv"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"pbar-error-wrapper"
0 0 4 3 1 #" "
0 0 14 3 5 #"means"
0 0 4 3 1 #" "
0 0 14 3 7 #"spreads"
0 0 4 3 1 #" "
0 0 14 3 7 #"popsize"
0 0 4 3 1 #" "
0 0 14 3 15 #"howmany-of-each"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"mu-sprd"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"res"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 4 3 1 #" "
0 0 14 3 15 #"howmany-of-each"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"_"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 5 #"nupop"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"make-rand-pop"
0 0 4 3 1 #" "
0 0 14 3 7 #"popsize"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 7 #"mu-sprd"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"mu-sprd"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 62
#"                                                              "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 5 #"nupop"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"stdv"
0 0 4 3 1 #" "
0 0 14 3 5 #"nupop"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"pbar-error"
0 0 4 3 1 #" "
0 0 14 3 5 #"nupop"
0 0 22 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 7 #"mu-sprd"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"mu-sprd"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 3 #"res"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 3 #"res"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 3 #"res"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 10 #"cross-prod"
0 0 4 3 1 #" "
0 0 14 3 5 #"means"
0 0 4 3 1 #" "
0 0 14 3 7 #"spreads"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 96
(
 #";; many-pop-generate:  (listof number) (listof number) number number"
 #" -> (listof (listof number))"
) 0 0 4 29 1 #"\n"
0 0 17 3 89
(
 #";; this one actually generates populations that can then be used for"
 #" an arbitrary purpose"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"many-pop-generate"
0 0 4 3 1 #" "
0 0 14 3 5 #"means"
0 0 4 3 1 #" "
0 0 14 3 7 #"spreads"
0 0 4 3 1 #" "
0 0 14 3 7 #"popsize"
0 0 4 3 1 #" "
0 0 14 3 15 #"howmany-of-each"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"mu-sprd"
0 0 4 3 1 #" "
0 0 14 3 3 #"res"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"pops"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 4 3 1 #" "
0 0 14 3 15 #"howmany-of-each"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"_"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 5 #"nupop"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"make-rand-pop"
0 0 4 3 1 #" "
0 0 14 3 7 #"popsize"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 7 #"mu-sprd"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"mu-sprd"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 64
#"                                                                "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 7 #"mu-sprd"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"mu-sprd"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 5 #"nupop"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"stdv"
0 0 4 3 1 #" "
0 0 14 3 5 #"nupop"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 5 #"nupop"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 14 3 4 #"pops"
0 0 4 3 1 #" "
0 0 14 3 3 #"res"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 5 #"empty"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 10 #"cross-prod"
0 0 4 3 1 #" "
0 0 14 3 5 #"means"
0 0 4 3 1 #" "
0 0 14 3 7 #"spreads"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";; do-pbar-error: (listof (listof number)) string -> ..."
0 0 4 29 1 #"\n"
0 0 17 3 105
(
 #";; run and write the pbar-error on each population with the mean and"
 #" stdv found in the first two elements"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"do-pbar-error"
0 0 4 3 1 #" "
0 0 14 3 5 #"lores"
0 0 4 3 1 #" "
0 0 14 3 5 #"fname"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 19 #"with-output-to-file"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 16 #"expand-user-path"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"string->path"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 4 3 1 #" "
0 0 19 3 24 #"\"~/research/NormEmerge/\""
0 0 4 3 1 #" "
0 0 14 3 5 #"fname"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"for-each"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"bundle"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 4 3 1 #" "
0 0 19 3 6 #"\"~a~%\""
0 0 4 3 1 #" "
0 0 14 3 6 #"bundle"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 14 3 5 #"lores"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 90
(
 #";; do-sim-steps-to-limit: (listof number) (listof population) boolea"
 #"n number string -> ..."
) 0 0 4 29 1 #"\n"
0 0 17 3 122
(
 #";; run each augmented-pop (from many-pops-generate) on all the limit"
 #"s the given number of times, write the results to file"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"do-sim-steps-to-limit"
0 0 4 3 1 #" "
0 0 14 3 8 #"lolimits"
0 0 4 3 1 #" "
0 0 14 3 4 #"pops"
0 0 4 3 1 #" "
0 0 14 3 5 #"clip?"
0 0 4 3 1 #" "
0 0 14 3 5 #"times"
0 0 4 3 1 #" "
0 0 14 3 5 #"fname"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 19 #"with-output-to-file"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 16 #"expand-user-path"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"string->path"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 4 3 1 #" "
0 0 19 3 24 #"\"~/research/NormEmerge/\""
0 0 4 3 1 #" "
0 0 14 3 5 #"fname"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"for-each"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"augpop"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 4 3 1 #" "
0 0 19 3 18 #"\"~a ~a ~a ~a ~a~%\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 6 #"augpop"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 6 #"augpop"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 6 #"augpop"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"fourth"
0 0 4 3 1 #" "
0 0 14 3 6 #"augpop"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 26 #"gather-sim-steps-to-limits"
0 0 4 3 1 #" "
0 0 14 3 8 #"lolimits"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"fifth"
0 0 4 3 1 #" "
0 0 14 3 6 #"augpop"
0 0 22 3 1 #")"
0 0 4 11 1 #" "
0 0 14 3 5 #"times"
0 0 4 3 1 #" "
0 0 14 3 5 #"clip?"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 14 3 4 #"pops"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 114
(
 #";;=================================================================="
 #"=============================================="
) 0 0 4 29 1 #"\n"
0 0 17 3 114
(
 #";;=================================================================="
 #"=============================================="
) 0 0 4 29 1 #"\n"
0 0 17 3 9 #";; Theory"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 58
#";; norm-emerge: (listof agent) -> (listof (listof number))"
0 0 4 29 1 #"\n"
0 0 17 3 111
(
 #";; Simulate the theory.  For a given population, adapt each agent ac"
 #"cording to the theoretically computed delta"
) 0 0 4 29 1 #"\n"
0 0 17 3 135
(
 #";; given the current agent bias and the population mean.  Repeat thi"
 #"s for as many steps as needed to get close enough to either 0 or 1."
) 0 0 4 29 1 #"\n"
0 0 17 3 42 #";; ****** NEED TO DOUBLE CHECK THIS ******"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"norm-emerge"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 17 3 31 #";; cix : agent number -> number"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 17 3 75
(
 #";; compute expected probability of given agent coordinating with the"
 #" others"
) 0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cix"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 4 #"pbar"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pibar"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 4 #"pbar"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pibar"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 4 #"pbar"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 17 3 53 #";; new-pbar : (listof agent) number -> (listof agent)"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 17 3 46 #";; compute the new biases for the given agents"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"new-pbar"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 4 #"pbar"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 1 #"d"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"constant-delta"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pibar"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 4 #"pbar"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 27 #"                           "
0 0 17 3 41 #";;(define d (alt-delta a (pibar a pbar)))"
0 0 4 29 1 #"\n"
0 0 4 3 27 #"                           "
0 0 17 3 39 #";;(define d (delta-i a (pibar a pbar)))"
0 0 4 29 1 #"\n"
0 0 4 3 27 #"                           "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #">="
0 0 4 3 1 #" "
0 0 14 3 1 #"d"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 25 #"                         "
0 0 22 3 1 #"("
0 0 14 3 3 #"min"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"d"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 3 #"1.0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 25 #"                         "
0 0 22 3 1 #"("
0 0 14 3 3 #"max"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"d"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 3 #"0.0"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 14 3 3 #"pop"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 17 3 37 #";; alt-delta : agent number -> number"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 17 3 63
#";; alternative delta computation that decellerates as converges"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"alt-delta"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 5 #"pibar"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 17 3 26 #";;(+ (* (- 1 a) X a pibar)"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 17 3 33 #";; (* -1 a X (- 1 a) (- 1 pibar))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 17 3 24 #";; (* a Y (- 1 a) pibar)"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 17 3 34 #";; (* -1 (- 1 a) Y a (- 1 pibar)))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 4 3 1 #" "
0 0 14 3 1 #"Y"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sqr"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 14 3 5 #"pibar"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 17 3 42 #";; constant-delta : agent number -> number"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 17 3 35 #";; compute expected delta given the"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"constant-delta"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 5 #"pibar"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 5 #"pibar"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 20 3 2 #"-1"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 5 #"pibar"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"Y"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 5 #"pibar"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"Y"
0 0 4 3 1 #" "
0 0 20 3 2 #"-1"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 5 #"pibar"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 17 3 59
#";; evolve : (listof agent) (listof number -> (listof number"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 17 3 88
(
 #";; run the math for until some criterion, returning the sequence of "
 #"overall coordination"
) 0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"evolve"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"apply"
0 0 4 3 1 #" "
0 0 14 3 3 #"min"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 12 #"CLOSE-ENOUGH"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"apply"
0 0 4 3 1 #" "
0 0 14 3 3 #"max"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 12 #"CLOSE-ENOUGH"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 7 #"reverse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 7 #"new-pop"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"new-pbar"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 22 3 1 #"("
0 0 14 3 6 #"evolve"
0 0 4 3 1 #" "
0 0 14 3 7 #"new-pop"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 22 3 6 #")))]))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 6 #"evolve"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 14 3 5 #"empty"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 50 #";; Misc norm-emerg (simulated theory) runs -------"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"non-biased"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 3 #";;("
0 0 17 3 11 #"norm-emerge"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 10 #"build-list"
0 0 17 3 1 #" "
0 0 17 3 1 #"n"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"lambda"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 1 #"_"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 1 #"+"
0 0 17 3 1 #" "
0 0 17 3 3 #"0.5"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 1 #"-"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 1 #"/"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"random"
0 0 17 3 1 #" "
0 0 17 3 24 #"1100) 10000.0) 0.05)))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 11 #"norm-emerge"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"make-rand-pop"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"one-sided"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"M"
0 0 4 3 1 #" "
0 0 14 3 1 #"B"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 11 #"norm-emerge"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"M"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"_"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"random"
0 0 4 3 1 #" "
0 0 20 3 4 #"1000"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 7 #"10000.0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 4 #"0.05"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-list"
0 0 4 3 1 #" "
0 0 14 3 1 #"M"
0 0 4 3 1 #" "
0 0 14 3 1 #"B"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"two-sided"
0 0 4 3 1 #" "
0 0 14 3 8 #"majority"
0 0 4 3 1 #" "
0 0 14 3 7 #"majbias"
0 0 4 3 1 #" "
0 0 14 3 8 #"minority"
0 0 4 3 1 #" "
0 0 14 3 7 #"minbias"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 11 #"norm-emerge"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-list"
0 0 4 3 1 #" "
0 0 14 3 8 #"majority"
0 0 4 3 1 #" "
0 0 14 3 7 #"majbias"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-list"
0 0 4 3 1 #" "
0 0 14 3 8 #"minority"
0 0 4 3 1 #" "
0 0 14 3 7 #"minbias"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 50 #";; Actual (non-simulated) Theory -----------------"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 51 #";; steps-to-upper-limit: limit population -> number"
0 0 4 29 1 #"\n"
0 0 17 3 139
(
 #";; For CONSTANT-UPDATE, compute the theoretically predicted number o"
 #"f steps to reach (or exceed) a limit (where limit > average(pop) > 0"
 #".5."
) 0 0 4 29 1 #"\n"
0 0 17 3 126
(
 #";; In the case of steps-to-one, use limit of 0.5.  That is, limits a"
 #"re in the range -.5 to .5, or 0 to .5 for the upper range."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 20 #"steps-to-upper-limit"
0 0 4 3 1 #" "
0 0 14 3 5 #"limit"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"pbar"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 7 #"epsilon"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 4 #"pbar"
0 0 4 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"log"
0 0 4 3 1 #" "
0 0 14 3 5 #"limit"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"log"
0 0 4 3 1 #" "
0 0 14 3 7 #"epsilon"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 3 #"log"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 54 #";; gather-ss-by-limit: number population number -> ???"
0 0 4 29 1 #"\n"
0 0 17 3 86
(
 #";; calls steps-to-upper-limit, a theory based computation for CONSTA"
 #"NT-UPDATE analysis"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"gather-ss-by-limit"
0 0 4 3 1 #" "
0 0 14 3 3 #"lim"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 5 #"times"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 3 #"lim"
0 0 4 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 20 3 3 #"1.0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 4 3 1 #" "
0 0 14 3 5 #"times"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"_"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"sim-steps-to-limit"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 3 #"lim"
0 0 4 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 11 #"adjust-bias"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 20 3 3 #"1.0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 4 3 1 #" "
0 0 14 3 5 #"times"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"_"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"sim-steps-to-limit"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 3 #"lim"
0 0 4 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 16 #"adj-bias-no-clip"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 20 #"steps-to-upper-limit"
0 0 4 3 1 #" "
0 0 14 3 3 #"lim"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";; gather...: (listof number) population -> (listof (list number num"
 #"ber))"
) 0 0 4 29 1 #"\n"
0 0 17 3 75
(
 #";; get results from theory for steps to each limit for the given pop"
 #"ulation"
) 0 0 4 29 1 #"\n"
0 0 17 3 52 #";; return list of pairs (list limit steps-to-limit)."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 29 #"gather-theory-steps-to-limits"
0 0 4 3 1 #" "
0 0 14 3 8 #"lolimits"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 24 #"new-steps-to-upper-limit"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 14 3 8 #"lolimits"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 49 #";; avg-delta-proportional-A: population -> number"
0 0 4 29 1 #"\n"
0 0 17 3 132
(
 #";; using the PROPORTIONAL-A method, 1/n * (P * summate( pbar - a )),"
 #" compute the average delta based on the given population values."
) 0 0 4 29 1 #"\n"
0 0 17 3 118
(
 #";; NOTE, this is not (?) making the pi_bar = pbar assumption (10/10/"
 #"2011: I think it is using pbar instead of pi_bar.)"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 24 #"avg-delta-proportional-A"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"pbar"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"P"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 4 #"pbar"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 49 #";; avg-delta-proportional-B: population -> number"
0 0 4 29 1 #"\n"
0 0 17 3 96
(
 #";; compute the expected or average delta for the population under th"
 #"e PROPORTIANL-B-UPDATE model"
) 0 0 4 29 1 #"\n"
0 0 17 3 29 #";; 2*P*(2*pbar - 1)*(a - a^2)"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 24 #"avg-delta-proportional-B"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"pbar"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 14 3 1 #"P"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 14 3 4 #"pbar"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 3 #"1.0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sqr"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 33 #"avg-delta-proportional-B-variance"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"pbar"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 10 #"sigsquared"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"variance"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 14 3 1 #"P"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 14 3 4 #"pbar"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 3 #"1.0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 4 #"pbar"
0 0 4 3 1 #" "
0 0 14 3 10 #"sigsquared"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sqr"
0 0 4 3 1 #" "
0 0 14 3 4 #"pbar"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 91
(
 #";; new-steps-to-lims-over-pops: (listof population) lolims -> (listo"
 #"f (list number number))"
) 0 0 4 29 1 #"\n"
0 0 17 3 71
(
 #";; average the gather-theory-steps-to-limits over a list of populati"
 #"ons"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 27 #"new-steps-to-lims-over-pops"
0 0 4 3 1 #" "
0 0 14 3 8 #"manypops"
0 0 4 3 1 #" "
0 0 14 3 4 #"lims"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 4 #"mres"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 29 #"gather-theory-steps-to-limits"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 20 3 2 #".5"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 4 #"lims"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 8 #"manypops"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"avg-one"
0 0 4 3 1 #" "
0 0 14 3 7 #"lopairs"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"caar"
0 0 4 3 1 #" "
0 0 14 3 7 #"lopairs"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"lopairs"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"avg-all"
0 0 4 3 1 #" "
0 0 14 3 9 #"lolopairs"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 9 #"lolopairs"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"avg-one"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 9 #"lolopairs"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 7 #"avg-all"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 9 #"lolopairs"
0 0 22 3 7 #")))])))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 7 #"avg-all"
0 0 4 3 1 #" "
0 0 14 3 4 #"mres"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 89
(
 #";; new-steps-to-upper-limit: number population (agent boolean boolea"
 #"n -> agent) -> number"
) 0 0 4 29 1 #"\n"
0 0 17 3 101
(
 #";; for the given update function and population, compute the number "
 #"of steps to reach the given limit"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 24 #"new-steps-to-upper-limit"
0 0 4 3 1 #" "
0 0 14 3 5 #"limit"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"help"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 5 #"steps"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 5 #"limit"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 5 #"steps"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"help"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"new-pop-proportional-B"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 14 3 5 #"steps"
0 0 22 3 6 #"))])))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"help"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 51 #";; new-pop-proportional-B: population -> population"
0 0 4 29 1 #"\n"
0 0 17 3 49 #";; compute the new population based on the theory"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"new-pop-proportional-B"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"pbar"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 14 3 1 #"P"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 14 3 4 #"pbar"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 3 #"1.0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sqr"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 3 #"pop"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 13 #"my-const-lims"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 2 #".5"
0 0 4 3 1 #" "
0 0 20 3 3 #".49"
0 0 4 3 1 #" "
0 0 20 3 3 #".48"
0 0 4 3 1 #" "
0 0 20 3 3 #".47"
0 0 4 3 1 #" "
0 0 20 3 3 #".45"
0 0 4 3 1 #" "
0 0 20 3 3 #".43"
0 0 4 3 1 #" "
0 0 20 3 2 #".4"
0 0 4 3 1 #" "
0 0 20 3 3 #".35"
0 0 4 3 1 #" "
0 0 20 3 2 #".3"
0 0 4 3 1 #" "
0 0 20 3 3 #".25"
0 0 4 3 1 #" "
0 0 20 3 2 #".2"
0 0 4 3 1 #" "
0 0 20 3 3 #".15"
0 0 4 3 1 #" "
0 0 20 3 2 #".1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 17 3 51 #";; '(1 .99 .98 .97 .95 .93 .9 .85 .8 .75 .7 .65 .6)"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 20 #"my-proportional-lims"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 3 #".45"
0 0 4 3 1 #" "
0 0 20 3 3 #".43"
0 0 4 3 1 #" "
0 0 20 3 2 #".4"
0 0 4 3 1 #" "
0 0 20 3 3 #".35"
0 0 4 3 1 #" "
0 0 20 3 2 #".3"
0 0 4 3 1 #" "
0 0 20 3 3 #".25"
0 0 4 3 1 #" "
0 0 20 3 2 #".2"
0 0 4 3 1 #" "
0 0 20 3 3 #".15"
0 0 4 3 1 #" "
0 0 20 3 2 #".1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 17 3 40 #";; took out some for proportional update"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 114
(
 #";;=================================================================="
 #"=============================================="
) 0 0 4 29 1 #"\n"
0 0 17 3 114
(
 #";;=================================================================="
 #"=============================================="
) 0 0 4 29 1 #"\n"
0 0 17 3 23 #";; Empirical Simulation"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 133
(
 #";; new-gather-to-limits: (listof number) population number (agent bo"
 #"olean boolean -> agent) -> (listof (listof (list number number)))"
) 0 0 4 29 1 #"\n"
0 0 17 3 86
(
 #";; given list of limits, a population, and a number of times to repe"
 #"at the population,"
) 0 0 4 29 1 #"\n"
0 0 17 3 42 #";; and an adjustment, or update, function "
0 0 4 29 1 #"\n"
0 0 17 3 33 #";; simulate the evolution of the "
0 0 17 3 27 #"population and as it adapts"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 6 #"record"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 6 #"number"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 5 #"steps"
0 0 17 3 32 #" to each limit as it gets there."
0 0 4 29 1 #"\n"
0 0 17 3 81
(
 #";; Return a list of lists, one for each time, that is a list of limi"
 #"t-step pairs."
) 0 0 4 29 1 #"\n"
0 0 17 3 61
#";; *** initially, make this work only for the upper range ***"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 20 #"new-gather-to-limits"
0 0 4 3 1 #" "
0 0 14 3 8 #"lolimits"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 5 #"times"
0 0 4 3 1 #" "
0 0 14 3 7 #"adjustf"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 17 3 100
(
 #";; help: (listof number) population (listof (list number number)) N "
 #"-> (listof (list number number))"
) 0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"help"
0 0 4 3 1 #" "
0 0 14 3 4 #"lims"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 11 #"limit-steps"
0 0 4 3 1 #" "
0 0 14 3 5 #"steps"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"mean"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 14 3 4 #"lims"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 11 #"limit-steps"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 2 #"[("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 4 #"mean"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 3 #"1.0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"lims"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 19 3 7 #"\"eject\""
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 2 #"[("
0 0 14 3 2 #">="
0 0 4 3 1 #" "
0 0 14 3 4 #"mean"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"lims"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"help"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"lims"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"one-iteration-f"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 7 #"adjustf"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"lims"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 5 #"steps"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 11 #"limit-steps"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 14 3 5 #"steps"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"help"
0 0 4 3 1 #" "
0 0 14 3 4 #"lims"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"one-iteration-f"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 7 #"adjustf"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 11 #"limit-steps"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 14 3 5 #"steps"
0 0 22 3 6 #"))])))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 14 3 5 #"times"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 7 #"one-try"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"help"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sort"
0 0 4 3 1 #" "
0 0 14 3 8 #"lolimits"
0 0 4 3 1 #" "
0 0 14 3 1 #"<"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"string?"
0 0 4 3 1 #" "
0 0 14 3 7 #"one-try"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 20 #"new-gather-to-limits"
0 0 4 3 1 #" "
0 0 14 3 8 #"lolimits"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 4 3 1 #" "
0 0 14 3 5 #"times"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 7 #"adjustf"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 7 #"one-try"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 20 #"new-gather-to-limits"
0 0 4 3 1 #" "
0 0 14 3 8 #"lolimits"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 4 3 1 #" "
0 0 14 3 5 #"times"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 7 #"adjustf"
0 0 22 3 8 #"))))])))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 89
(
 #";; map-limit-res: (listof (listof (list number number))) -> (listof "
 #"(list number number))"
) 0 0 4 29 1 #"\n"
0 0 17 3 54 #";; average the limit results from new-gather-to-limits"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"map-limit-res"
0 0 4 3 1 #" "
0 0 14 3 3 #"res"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 3 #"res"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"average-one"
0 0 4 3 1 #" "
0 0 14 3 7 #"lopairs"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"caar"
0 0 4 3 1 #" "
0 0 14 3 7 #"lopairs"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 4 3 1 #" "
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"lopairs"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"average-all"
0 0 4 3 1 #" "
0 0 14 3 4 #"lres"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"lres"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"average-one"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"lres"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 11 #"average-all"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"lres"
0 0 22 3 7 #")))])))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 11 #"average-all"
0 0 4 3 1 #" "
0 0 14 3 3 #"res"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 117
(
 #";; gather-sim-steps-to-limits : (listof number) population number (a"
 #"gent boolean boolean -> agent) -> (listof number)"
) 0 0 4 29 1 #"\n"
0 0 17 3 95
(
 #";; get results from sim for steps to each limit for given population"
 #" averaged over times times."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 26 #"gather-sim-steps-to-limits"
0 0 4 3 1 #" "
0 0 14 3 8 #"lolimits"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 5 #"times"
0 0 4 3 1 #" "
0 0 14 3 7 #"adjustf"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 20 3 3 #"1.0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 4 3 1 #" "
0 0 14 3 5 #"times"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"_"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"sim-steps-to-limit"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 7 #"adjustf"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 14 3 8 #"lolimits"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 87
(
 #";; sim-steps-to-limit: number (listof agent) (agent boolean boolean "
 #"-> agent) -> number"
) 0 0 4 29 1 #"\n"
0 0 17 3 62
#";; run a simulation and count the steps to reach a given limit"
0 0 4 29 1 #"\n"
0 0 17 3 129
(
 #";; [updated 2/4/2011 to check the limit on both sides.  *** HOWEVER:"
 #" need to consider what to do when the population crosses over"
) 0 0 4 29 1 #"\n"
0 0 17 3 56 #";;  the mid-point and converges to the other limit. ***]"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"sim-steps-to-limit"
0 0 4 3 1 #" "
0 0 14 3 5 #"limit"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 8 #"l-update"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"ssto-aux"
0 0 4 3 1 #" "
0 0 14 3 4 #"popi"
0 0 4 3 1 #" "
0 0 14 3 5 #"steps"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"<="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 3 #"1.0"
0 0 4 3 1 #" "
0 0 14 3 5 #"limit"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 4 #"popi"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 5 #"limit"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 5 #"steps"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 15 3 4 #"when"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"modulo"
0 0 4 3 1 #" "
0 0 14 3 5 #"steps"
0 0 4 3 1 #" "
0 0 20 3 3 #"100"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 4 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"At"
0 0 19 3 1 #" "
0 0 19 3 4 #"step"
0 0 19 3 10 #" ~a: ~a~%\""
0 0 4 3 1 #" "
0 0 14 3 5 #"steps"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 4 #"popi"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 8 #"ssto-aux"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"mk-new-pop"
0 0 4 3 1 #" "
0 0 14 3 4 #"popi"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 14 3 5 #"steps"
0 0 22 3 5 #"))]))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"mk-new-pop"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"interact"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 8 #"l-update"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"pair-up"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 17 3 21 #";;(one-iteration pop)"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 8 #"ssto-aux"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 31 #";; population is a listof agent"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 58
#";; make-population : N N number N number -> (listof agent)"
0 0 4 29 1 #"\n"
0 0 17 3 134
(
 #";; create a population of total size tot, where f1 have bias b1 and "
 #"f2 have bias b2, and the remaining (tot - (f1 + f2)) have bias 1/2"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"make-population"
0 0 4 3 1 #" "
0 0 14 3 3 #"tot"
0 0 4 3 1 #" "
0 0 14 3 2 #"f1"
0 0 4 3 1 #" "
0 0 14 3 2 #"b1"
0 0 4 3 1 #" "
0 0 14 3 2 #"f2"
0 0 4 3 1 #" "
0 0 14 3 2 #"b2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-list"
0 0 4 3 1 #" "
0 0 14 3 2 #"f1"
0 0 4 3 1 #" "
0 0 14 3 2 #"b1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-list"
0 0 4 3 1 #" "
0 0 14 3 2 #"f2"
0 0 4 3 1 #" "
0 0 14 3 2 #"b2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 3 #"tot"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 2 #"f1"
0 0 4 3 1 #" "
0 0 14 3 2 #"f2"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 3 #"1/2"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 39 #";; Update Methods ---------------------"
0 0 4 29 1 #"\n"
0 0 17 3 49 #";; generic-adjust: agent boolean boolean -> agent"
0 0 4 29 1 #"\n"
0 0 17 3 121
(
 #";; current agent, the action taken (true=a, false=(1-a)) and the out"
 #"come of interaction (true=confilct, false=coordinate)"
) 0 0 4 29 1 #"\n"
0 0 17 3 9 #";; yields"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 8 #"adjusted"
0 0 17 3 1 #" "
0 0 17 3 5 #"agent"
0 0 17 3 25 #" according to some method"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 47 #";; adjust-bias : agent boolean boolean -> agent"
0 0 4 29 1 #"\n"
0 0 17 3 117
(
 #";; given the selected act and the outcome (true means conflict), ret"
 #"urn the constant-incremented or decremented agent"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"adjust-bias"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 3 #"act"
0 0 4 3 1 #" "
0 0 14 3 16 #"outcome-conflict"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 14 3 3 #"act"
0 0 4 3 1 #" "
0 0 14 3 16 #"outcome-conflict"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 14 3 3 #"act"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 14 3 16 #"outcome-conflict"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 3 #"max"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 9 #"CONST-INC"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"min"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 9 #"CONST-INC"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #")]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 51 #";; adj-bias-no-clip: agent boolean boolean -> agent"
0 0 4 29 1 #"\n"
0 0 17 3 151
(
 #";; given the selected act and outcome (true means conflict), return "
 #"the constant-incremented or decremented agent (bias) WITHOUT clippin"
 #"g at 0.0 or 1.0"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"adj-bias-no-clip"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 3 #"act"
0 0 4 3 1 #" "
0 0 14 3 2 #"oc"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 14 3 3 #"act"
0 0 4 3 1 #" "
0 0 14 3 2 #"oc"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 14 3 3 #"act"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 14 3 2 #"oc"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 9 #"CONST-INC"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 9 #"CONST-INC"
0 0 22 3 4 #")]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 53 #";; adj-proportional-A: agent boolean boolean -> agent"
0 0 4 29 1 #"\n"
0 0 17 3 119
(
 #";; given the act chosen by the given agent and the outcome (true mea"
 #"ns conflict) of that action for the recent pairing,"
) 0 0 4 29 1 #"\n"
0 0 17 3 68
#";; compute the new bias according to the PROPORTIONAL-A update rule:"
0 0 4 29 1 #"\n"
0 0 17 3 6 #";; a_i"
0 0 17 3 1 #" "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 3 #"a_i"
0 0 17 3 1 #" "
0 0 17 3 1 #"+"
0 0 17 3 1 #" "
0 0 17 3 2 #"P*"
0 0 17 3 1 #"("
0 0 17 3 35 #"1-a_i) if chose act and coordinate,"
0 0 4 29 1 #"\n"
0 0 17 3 45 #";; = a_i - P*(a_i) if chose act and conflict,"
0 0 4 29 1 #"\n"
0 0 17 3 50 #";; = a_i + P*(1-a_i) if chose NOT-act and conflict"
0 0 4 29 1 #"\n"
0 0 17 3 50 #";; = a_i - P*(a_i) if chose NOT-act and coordinate"
0 0 4 29 1 #"\n"
0 0 17 3 103
(
 #";; as of 10/9/2011, this version is consistant with the analysis tha"
 #"t simplifies to (p-bar_i-hat - p_i)"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"adj-proportional-A"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 3 #"act"
0 0 4 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 1 #"["
0 0 14 3 3 #"act"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 1 #"["
0 0 14 3 7 #"outcome"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"P"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"P"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 3 #"1.0"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 6 #")))])]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 1 #"["
0 0 14 3 7 #"outcome"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"P"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 3 #"1.0"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"P"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 7 #"))])]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 53 #";; adj-proportional-B: agent boolean boolean -> agent"
0 0 4 29 1 #"\n"
0 0 17 3 43 #";; using the other proportional update rule"
0 0 4 29 1 #"\n"
0 0 17 3 52 #";; a_i = a_i + P*(1-a_i) if chose act and coordinate"
0 0 4 29 1 #"\n"
0 0 17 3 50 #";;     = a_i - P*(1-a_i) if chose act and conflict"
0 0 4 29 1 #"\n"
0 0 17 3 50 #";;     = a_i + P*a_i if chose NOT-act and conflict"
0 0 4 29 1 #"\n"
0 0 17 3 52 #";;     = a_i - P*a_i if chose NOT-act and coordinate"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"adj-proportional-B"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 3 #"act"
0 0 4 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 1 #"["
0 0 14 3 3 #"act"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 1 #"["
0 0 14 3 7 #"outcome"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"P"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 3 #"1.0"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"P"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 3 #"1.0"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 6 #")))])]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 1 #"["
0 0 14 3 7 #"outcome"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"P"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"P"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 7 #"))])]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 42 #";; Agent Interactions --------------------"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 75
(
 #";; interact : agent agent (agent boolean boolean -> agent) -> (agent"
 #" agent)"
) 0 0 4 29 1 #"\n"
0 0 17 3 77
(
 #";; for two agents, interact and update according to the given update"
 #" function"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"interact"
0 0 4 3 1 #" "
0 0 14 3 2 #"a1"
0 0 4 3 1 #" "
0 0 14 3 2 #"a2"
0 0 4 3 1 #" "
0 0 14 3 11 #"update-func"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 6 #"a1-act"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"<="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"random"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"a1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 6 #"a2-act"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"<="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"random"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"a2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"xor"
0 0 4 3 1 #" "
0 0 14 3 2 #"b1"
0 0 4 3 1 #" "
0 0 14 3 2 #"b2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 14 3 2 #"b1"
0 0 4 3 1 #" "
0 0 14 3 2 #"b2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 14 3 2 #"b1"
0 0 4 3 1 #" "
0 0 14 3 2 #"b2"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 16 #"conflict-outcome"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"xor"
0 0 4 3 1 #" "
0 0 14 3 6 #"a1-act"
0 0 4 3 1 #" "
0 0 14 3 6 #"a2-act"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 11 #"update-func"
0 0 4 3 1 #" "
0 0 14 3 2 #"a1"
0 0 4 3 1 #" "
0 0 14 3 6 #"a1-act"
0 0 4 3 1 #" "
0 0 14 3 16 #"conflict-outcome"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 11 #"update-func"
0 0 4 3 1 #" "
0 0 14 3 2 #"a2"
0 0 4 3 1 #" "
0 0 14 3 6 #"a2-act"
0 0 4 3 1 #" "
0 0 14 3 16 #"conflict-outcome"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 54 #";; pair-up : population -> (listof (list agent agent))"
0 0 4 29 1 #"\n"
0 0 17 3 62
#";; create list of random pairs of the agents in the population"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"pair-up"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 12 #"rand-indices"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"shuffle-list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 17 3 55 #";; build-em : (listof N) -> (listof (pair agent agent))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-em"
0 0 4 3 1 #" "
0 0 14 3 3 #"loi"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 14 3 3 #"loi"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 3 #"loi"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 36 #"                                    "
0 0 22 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 3 #"loi"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-em"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 3 #"loi"
0 0 22 3 7 #"))))]))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-em"
0 0 4 3 1 #" "
0 0 14 3 12 #"rand-indices"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 81
(
 #";; sim-avg-update: population (number boolean boolean -> number) num"
 #"ber -> number"
) 0 0 4 29 1 #"\n"
0 0 17 3 125
(
 #";; for the given agent-adjustment function, compute the avg delta fo"
 #"r one step of interaction and update over this population"
) 0 0 4 29 1 #"\n"
0 0 17 3 87
(
 #";; optionally, average this over ntimes with the same population but"
 #" different pairings"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"sim-avg-update"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 7 #"adjustf"
0 0 4 3 1 #" "
0 0 14 3 6 #"ntimes"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 4 3 1 #" "
0 0 14 3 6 #"ntimes"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"_"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"one-iteration-f"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 7 #"adjustf"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 79
(
 #";; one-iteration-f: population (number boolean boolean -> number) ->"
 #" population"
) 0 0 4 29 1 #"\n"
0 0 17 3 117
(
 #";; randomly pair-up the given population, have each pair interact an"
 #"d be updated based on the given adjustf function."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"one-iteration-f"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 7 #"adjustf"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"interact"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 7 #"adjustf"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"pair-up"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 47 #";; one-iteration : population -> (listof agent)"
0 0 4 29 1 #"\n"
0 0 17 3 100
(
 #";; pair up the population and perform the paired interactions, creat"
 #"ing the new population of agents"
) 0 0 4 29 1 #"\n"
0 0 17 3 39 #";; preserved for backward compatibility"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"one-iteration"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 15 #"one-iteration-f"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 11 #"adjust-bias"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 84
(
 #";; multi-iteration-f : population N (number boolean boolean -> numbe"
 #"r) -> population"
) 0 0 4 29 1 #"\n"
0 0 17 3 37 #";; do n iterations of one-iteration-f"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"multi-iteration-f"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 7 #"adjustf"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"multi-iteration-f"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"one-iteration-f"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 7 #"adjustf"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 7 #"adjustf"
0 0 22 3 4 #")]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 47 #";; multi-iteration : population N -> population"
0 0 4 29 1 #"\n"
0 0 17 3 72
(
 #";; do n iterations with pop with default adjustment function adjust-"
 #"bias"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"multi-iteration"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 17 #"multi-iteration-f"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 11 #"adjust-bias"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 45 #";; bias-freq : (listof agent) -> (vectorof N)"
0 0 4 29 1 #"\n"
0 0 17 3 129
(
 #";; Count the number of agents with each respective bias.  *** As wri"
 #"tten, this works only with the constant-update adjustment ***"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"bias-freq"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 3 #"res"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-vector"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 9 #"CONST-INC"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"count-em"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"res"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-set!"
0 0 4 3 1 #" "
0 0 14 3 3 #"res"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 9 #"CONST-INC"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 3 #"res"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 9 #"CONST-INC"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 8 #"count-em"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 5 #"))]))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 8 #"count-em"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 17 3 70
(
 #";; collect-multi-iter : (listof agent) N -> (listof (vectorof number"
 #"))"
) 0 0 4 29 1 #"\n"
0 0 17 3 84
(
 #";; collect the frequency distributions for bias values over the numb"
 #"er of iterations"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"collect-multi-iter"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 17 3 57 #";; run-em: N (listof agent) -> (listof (vectorof number))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 17 3 41 #";; run an iteration and store the results"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"run-em"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"bias-freq"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 6 #"run-em"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"one-iteration"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 6 #")))]))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 6 #"run-em"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 103
(
 #";; merge-two-runs : (listof (vectorof number)) (listof (vectorof num"
 #"ber)) -> (listof (vectorof number))"
) 0 0 4 29 1 #"\n"
0 0 17 3 61
#";; take two sequences of frequency distributions and add them"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"merge-two-runs"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"v1"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 12 #"build-vector"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 9 #"CONST-INC"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 2 #"v1"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 67
#";; do-multi-runs : N N (listof agent) -> (listof (vectorof number))"
0 0 4 29 1 #"\n"
0 0 17 3 148
(
 #";; run 'rep' repititions of a simulation out to 'len' iterations wit"
 #"h given initial population, 'pop', returning the combined frequency "
 #"distribution"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"do-multi-runs"
0 0 4 3 1 #" "
0 0 14 3 3 #"rep"
0 0 4 3 1 #" "
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 4 3 1 #" "
0 0 14 3 14 #"merge-two-runs"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 4 3 1 #" "
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"_"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-vector"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 9 #"CONST-INC"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 4 3 1 #" "
0 0 14 3 3 #"rep"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"_"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"collect-multi-iter"
0 0 4 3 1 #" "
0 0 14 3 3 #"pop"
0 0 4 3 1 #" "
0 0 14 3 3 #"len"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 61
#";; dump-frequencies: string (listof (vectorof number)) -> ..."
0 0 4 29 1 #"\n"
0 0 17 3 87
(
 #";; for the accumulated data as list of number-vectors, dump the numb"
 #"ers to a file given"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"dump-frequencies"
0 0 4 3 1 #" "
0 0 14 3 5 #"fname"
0 0 4 3 1 #" "
0 0 14 3 11 #"list-of-vec"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"record"
0 0 4 3 1 #" "
0 0 14 3 5 #"fname"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 12 #"vector->list"
0 0 4 3 1 #" "
0 0 14 3 11 #"list-of-vec"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 50 #";; record : string (listof (listof number)) -> ..."
0 0 4 29 1 #"\n"
0 0 17 3 94
(
 #";; for data in a list of number-lists, print each value on a separat"
 #"e line(? -- not sure why)."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"record"
0 0 4 3 1 #" "
0 0 14 3 5 #"fname"
0 0 4 3 1 #" "
0 0 14 3 13 #"list-of-lists"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 19 #"with-output-to-file"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"for-each"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"timeslice"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 8 #"for-each"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"agent"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 4 3 1 #" "
0 0 19 3 6 #"\"~a~%\""
0 0 4 3 1 #" "
0 0 14 3 5 #"agent"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 14 3 9 #"timeslice"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 4 3 1 #" "
0 0 19 3 4 #"\"~%\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 14 3 13 #"list-of-lists"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 61
#";; abstract-write-to-file: string string (listof data) -> ..."
0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";; consume the filename arg, the print constrol string, and list of "
 #"data,"
) 0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";; write each data item according to the control string to the file "
 #"given"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"abstract-write-to-file"
0 0 4 3 1 #" "
0 0 14 3 5 #"fname"
0 0 4 3 1 #" "
0 0 14 3 6 #"lodata"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 19 #"with-output-to-file"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 16 #"expand-user-path"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"string->path"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 4 3 1 #" "
0 0 19 3 24 #"\"~/research/NormEmerge/\""
0 0 4 3 1 #" "
0 0 14 3 5 #"fname"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"for-each"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"data-item"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 8 #"for-each"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"datum"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 4 3 1 #" "
0 0 19 3 6 #"\"~v~c\""
0 0 4 3 1 #" "
0 0 14 3 5 #"datum"
0 0 4 3 1 #" "
0 0 20 3 5 #"#\\tab"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 14 3 9 #"data-item"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 4 3 1 #" "
0 0 19 3 4 #"\"~%\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 14 3 6 #"lodata"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 101
(
 #";;=================================================================="
 #"================================="
) 0 0 4 29 1 #"\n"
0 0 17 3 29 #";; Experiment Data Collection"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 78
(
 #";; create 50 populations of 100 agents for each combination of mean "
 #"and spread"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 8 #"popsplus"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"create-pops-plus"
0 0 4 3 1 #" "
0 0 20 3 2 #"50"
0 0 4 3 1 #" "
0 0 20 3 3 #"100"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 4 3 1 #" "
0 0 20 3 2 #"19"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 20 3 3 #".05"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 3 #".25"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"4"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 119
(
 #";; getsomeres-by-mean: (listof (list number number population)) (pop"
 #"ulation -> number) -> (listof (list number number))"
) 0 0 4 29 1 #"\n"
0 0 17 3 146
(
 #";; for a list of poptuples consisting mean, spread and population, a"
 #"pply the given function which consumes a population and returns an a"
 #"vg-update,"
) 0 0 4 29 1 #"\n"
0 0 17 3 141
(
 #";; return a list of tuples, one for each mean, consisting of mean fo"
 #"llowed by average update over all given populations having the same "
 #"mean."
) 0 0 4 29 1 #"\n"
0 0 17 3 82
(
 #";; The popsplus argument is presumed to have been filtered by a part"
 #"icular spread."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"getsomeres-by-mean"
0 0 4 3 1 #" "
0 0 14 3 8 #"popsplus"
0 0 4 3 1 #" "
0 0 14 3 8 #"update-f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"grp"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"caar"
0 0 4 3 1 #" "
0 0 14 3 3 #"grp"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 3 #"grp"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 8 #"group-by"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"ptup"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 4 #"ptup"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"update-f"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 4 #"ptup"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 14 3 8 #"popsplus"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 121
(
 #";; pair-up-res: (listof (list number number)) (listof (list number n"
 #"umber)) -> (listof (list number number number number)"
) 0 0 4 29 1 #"\n"
0 0 17 3 135
(
 #";; take two results-sets from getsomeres-by-mean, and zip them toget"
 #"her as (list mean difference-between-res theory-res simulation-res)"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"pair-up-res"
0 0 4 3 1 #" "
0 0 14 3 4 #"tres"
0 0 4 3 1 #" "
0 0 14 3 4 #"sres"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 14 3 4 #"tres"
0 0 4 3 1 #" "
0 0 14 3 4 #"sres"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 1 #"|"
0 0 17 29 1 #"\n"
0 0 17 3 43 #";; theoretical update for these populations"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 9 #"theoryres"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 3 #"  ("
0 0 17 3 18 #"getsomeres-by-mean"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"filter"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"lambda"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 4 #"ptup"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"second"
0 0 17 3 1 #" "
0 0 17 3 4 #"ptup"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"8"
0 0 17 3 2 #"))"
0 0 17 3 1 #" "
0 0 17 3 8 #"popsplus"
0 0 17 3 1 #")"
0 0 17 3 34 #" avg-delta-proportional-B-variance"
0 0 17 3 2 #"))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 90
(
 #";; simulated update for these same populations, 100 different pairin"
 #"gs for each population"
) 0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 6 #"simres"
0 0 17 29 1 #"\n"
0 0 17 3 3 #"  ("
0 0 17 3 18 #"getsomeres-by-mean"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"filter"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"lambda"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 4 #"ptup"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"second"
0 0 17 3 1 #" "
0 0 17 3 4 #"ptup"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"8"
0 0 17 3 2 #"))"
0 0 17 3 1 #" "
0 0 17 3 8 #"popsplus"
0 0 17 3 1 #")"
0 0 17 3 2 #" ("
0 0 17 3 6 #"lambda"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 1 #"p"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 14 #"sim-avg-update"
0 0 17 3 1 #" "
0 0 17 3 1 #"p"
0 0 17 3 1 #" "
0 0 17 3 18 #"adj-proportional-B"
0 0 17 3 1 #" "
0 0 17 3 3 #"100"
0 0 17 3 4 #"))))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 31 #";; paird results for .25 spread"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 6 #"prdres"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 11 #"pair-up-res"
0 0 17 3 1 #" "
0 0 17 3 9 #"theoryres"
0 0 17 3 1 #" "
0 0 17 3 8 #"simres))"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0           0
